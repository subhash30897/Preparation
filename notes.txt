
ArrayList<Integer> al = new ArrayList<Integer>();
System.out.println("Elements of the ArrayList " + "before sorting : " + al);
Elements of the ArrayList before sorting : [205, 102, 98, 275, 203]

https://www.geeksforgeeks.org/collections-sort-java-examples/


java.util.Collections.sort() method is present in java.util.Collections class. It is used to sort the elements present in the specified list of Collection in ascending order. It works similar to java.util.Arrays.sort() method but it is better than as it can sort the elements of Array as well as linked list, queue and many more present in it.

Collections.sort(al); - ascending order
Time Complexity: O(N log N) as time complexity of Collections.sort() is O(nlog(n)).

Collections.sort(al, Collections.reverseOrder()); - descending order.
Time Complexity: O(N log N) as time complexity of Collections.sort() is O(nlog(n)).

Sorting an ArrayList according to user defined criteria. We can use Comparator Interface for this purpose.
